#include <iostream>
#include <string>
#include <vector>
#include <queue>

using namespace std;

int n, m;
char arr[2001][2001];
bool visited[2001][2001];
int dy[2] = {1, 0};
int dx[2] = {0, 1};
int ny, nx;
string ans;

struct Node{
    int y;
    int x;
    int idx;
};

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < m;
}

void BFS(){
    queue<Node> q;
    q.push({0, 0, 0});
    visited[0][0] = true;

    while(!q.empty()){

        int tmp = q.front().idx;
        char mChar = 'z';
        vector<Node> v;

        while(!q.empty() && q.front().idx == tmp){
            v.push_back(q.front());
            if(arr[q.front().y][q.front().x] < mChar) mChar = arr[q.front().y][q.front().x];
            q.pop();
        }

        ans += mChar;
        for(int i=0; i<v.size(); i++){
            if(arr[v[i].y][v[i].x] == mChar){
                for(int j=0; j<2; j++){
                    ny = v[i].y + dy[j];
                    nx = v[i].x + dx[j];

                    if(InRange(ny, nx) && !visited[ny][nx]){
                        visited[ny][nx] = true;
                        q.push({ny, nx, v[i].idx+1});
                    }
                }
            }
        }

    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    int T;
    cin >> T;

    for(int tCase=1; tCase<=T; tCase++){

        ans = "";

        cin >> n >> m;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                cin >> arr[i][j];
                visited[i][j] = false;
            }
        }
        BFS();

        if(ans.length() > n + m -1) ans.erase(ans.length()-1);
        //
        cout << "#" << tCase << " " << ans << "\n";
    }
}
