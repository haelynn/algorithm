#include <iostream>

using namespace std;

struct Flag{
    int w;
    int b;
    int r;
};
Flag flag[50];

int n, m, ans, comp;
char arr[51][51];

void DFS(char color, int cnt, int idx){

    if(idx > n-2){

        if(color == 'B' || color == 'R')
            comp = min(comp, cnt);
        return;
    }

    if(color == 'W'){
        DFS('W', cnt + flag[idx].r + flag[idx].b, idx+1);
        DFS('B', cnt + flag[idx].r + flag[idx].w, idx+1);
    }
    else if(color == 'B'){
        DFS('R', cnt + flag[idx].w + flag[idx].b, idx+1);
        DFS('B', cnt + flag[idx].r + flag[idx].w, idx+1);
    }
    else{
        DFS('R', cnt + flag[idx].w + flag[idx].b, idx+1);
    }

}

int main(){
    int T;
    scanf("%d", &T);

    for(int t=1; t<=T; t++){

        ans = 0;
        comp = 0x7fffffff;

        scanf("%d %d", &n, &m);
        for(int i=0; i<n; i++){
            scanf("%s", &arr[i]);

            flag[i] = {0, 0, 0};
            for(int j=0; j<m; j++){
                if(arr[i][j] == 'R') flag[i].r++;
                else if(arr[i][j] == 'W') flag[i].w++;
                else flag[i].b++;
            }

            if(i == 0) ans += flag[0].r + flag[0].b;
            if(i == n-1) ans += flag[n-1].w + flag[n-1].b;
        }

        DFS('W', 0, 1);
        ans += comp;

        // output
        printf("#%d %d\n", t, ans);
    }
}
