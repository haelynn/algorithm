// https://blog.naver.com/kimh0429/221436686717

#include <iostream>
#include <algorithm>
#define L 0
#define R 1
#define U 2
#define D 3

using namespace std;

typedef struct __DP{
    int mem[16][4];
}DP;

int r, c;
char arr[21][21];
DP dp[21][21];
int dy[4] = {0, 0, -1, 1};
int dx[4] = {-1, 1, 0, 0};

int InRangeY(int y){
    if(y == r) return 0;
    if(y == -1) return r-1;
    else return y;
}

int InRangeX(int x){
    if(x == c) return 0;
    if(x == -1) return c-1;
    else return x;
}

int InRangeMem(int mem){
    if(mem == 16) return 0;
    if(mem == -1) return 15;
    else return mem;
}

bool DFS(int y, int x, int mem, int direction){

    if(arr[y][x] == '@') return true;
    if(dp[y][x].mem[mem][direction] == 1) return false;

    dp[y][x].mem[mem][direction] = 1;

    int ny = InRangeY(y + dy[direction]);
    int nx = InRangeX(x + dx[direction]);

    if(arr[y][x] >= '0' && arr[y][x] <= '9'){
        ny = InRangeY(y + dy[direction]);
        nx = InRangeX(x + dx[direction]);
        mem = arr[y][x] - '0';
    }
    else if(arr[y][x] == '<'){
        ny = InRangeY(y + dy[L]);
        nx = InRangeX(x + dx[L]);
        direction = L;
    }
    else if(arr[y][x] == '>'){
        ny = InRangeY(y + dy[R]);
        nx = InRangeX(x + dx[R]);
        direction = R;
    }
    else if(arr[y][x] == '^'){
        ny = InRangeY(y + dy[U]);
        nx = InRangeX(x + dx[U]);
        direction = U;
    }
    else if(arr[y][x] == 'v'){
        ny = InRangeY(y + dy[D]);
        nx = InRangeX(x + dx[D]);
        direction = D;
    }
    else if(arr[y][x] == '_'){
        if(mem == 0){
            ny = InRangeY(y + dy[R]);
            nx = InRangeX(x + dx[R]);
            direction = R;
        }
        else{
            ny = InRangeY(y + dy[L]);
            nx = InRangeX(x + dx[L]);
            direction = L;
        }
    }
    else if(arr[y][x] == '|'){
        if(mem == 0){
            ny = InRangeY(y + dy[D]);
            nx = InRangeX(x + dx[D]);
            direction = D;
        }
        else{
            ny = InRangeY(y + dy[U]);
            nx = InRangeX(x + dx[U]);
            direction = U;
        }
    }
    else if(arr[y][x] == '?'){
        bool tmp = false;
        for(int i=0; i<4; i++){
            ny = InRangeY(y + dy[i]);
            nx = InRangeX(x + dx[i]);

            tmp = DFS(ny, nx, mem, i);
            if(tmp) break;
        }
        return tmp;
    }
    else if(arr[y][x] == '+'){
        mem = InRangeMem(mem+1);
    }
    else if(arr[y][x] == '-'){
        mem = InRangeMem(mem-1);
    }

    return DFS(ny, nx, mem, direction);
}

int main(){

    int T;
    cin >> T;

    for(int t=1; t<=T; t++){
        cin >> r >> c;
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                cin >> arr[i][j];
            }
        }

        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                for(int k=0; k<16; k++){
                    for(int l=0; l<4; l++)
                        dp[i][j].mem[k][l] = 0;
                }
            }
        }
        bool ans = DFS(0, 0, 0, R);

        //
        cout << "#" << t << " ";
        if(ans) cout << "YES\n";
        else cout << "NO\n";
    }
}
