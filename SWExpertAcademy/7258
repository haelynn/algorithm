#define Y " YES\n"
#define N " NO\n"
#define U (0)
#define D (1)
#define L (2)
#define R (3)
#include <iostream>

using namespace std;

int r, c;
char arr[21][21];
bool visited[21][21][16][4];
int dy[4] = {-1, 1, 0, 0}; // 위 아래 왼 오른
int dx[4] = {0, 0, -1, 1};
bool flag;

int InMemory(int mem){
    if(mem > 15) return 0;
    if(mem < 0) return 15;
    else return mem;
}

int InRangeY(int y){
    if(y >= r) return 0;
    else if(y < 0) return r-1;
    else return y;
}

int InRangeX(int x){
    if(x >= c) return 0;
    else if(x < 0) return c-1;
    else return x;
}

void DFS(int y, int x, int mem, int dir){

    if(flag || visited[y][x][mem][dir]) return;
    if(arr[y][x] == '@'){
        flag = true;
        return;
    }

    char tmp = arr[y][x];
    visited[y][x][mem][dir] = true;

    int ny, nx;

    if(tmp == '<') dir = L;
    else if(tmp == '>') dir = R;
    else if(tmp == '^') dir = U;
    else if(tmp == 'v') dir = D;
    else if(tmp == '_'){
        if(mem == 0) dir = R;
        else dir = L;
    }
    else if(tmp == '|'){
        if(mem == 0) dir = D;
        else dir = U;
    }
    else if(tmp == '?'){
        for(int i=0; i<4; i++){
            ny = y + dy[i];
            nx = x + dx[i];

            ny = InRangeY(ny);
            nx = InRangeX(nx);
            DFS(ny, nx, mem, i);
        }
    }
    else if(tmp >= '0' && tmp <= '9') mem = tmp - '0';
    else if(tmp == '+') mem = InMemory(mem+1);
    else if(tmp == '-') mem = InMemory(mem-1);

    visited[y][x][mem][dir] = true;

    if(tmp == '?') return;

    ny = y + dy[dir];
    nx = x + dx[dir];

    ny = InRangeY(ny);
    nx = InRangeX(nx);

    DFS(ny, nx, mem, dir);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    int T;
    cin >> T;

    for(int tCase=1; tCase<=T; tCase++){

        flag = false;
        cin >> r >> c;
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                cin >> arr[i][j];

                for(int k=0; k<=15; k++){
                    for(int l=0; l<4; l++)
                        visited[i][j][k][l] = false;
                }
            }
        }

        DFS(0, 0, 0, R);
        // output
        cout << "#" << tCase;
        if(!flag) cout << N;
        else cout << Y;
    }
}
