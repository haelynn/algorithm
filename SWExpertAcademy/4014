#include <iostream>
#include <cstring>

using namespace std;

#define UP 1
#define DOWN -1
int n, k, ans;
int arr[21][21];

bool InRange(int idx) {
	if (idx > -1 && idx < n) return true;
	else return false;
}

int Solve(int y, int x, int dir) {

	int checked[21][2]; // state, floor
	int visited[21] = { 0, };

	memset(checked, 0, sizeof(checked));
	checked[0][1] = arr[y][x];

	for (int i = 1; i < n; i++) {

		int pre, cur;

		if (dir == -1) { // 가로보기
			pre = arr[y][i - 1];
			cur = arr[y][i];
		}
		else { // 세로보기
			pre = arr[i - 1][x];
			cur = arr[i][x];
		}
		
		checked[i][1] = cur;

		if (cur == pre) checked[i][0] = 0;
		else if (cur - pre == DOWN) checked[i][0] = DOWN;
		else if (cur - pre == UP) checked[i][0] = UP;
		else return 0;
	}

	for (int i = 1; i < n; i++) {

		int state = checked[i][0];

		if (state == UP) {
		
			int tmp = i - k;
			if (!InRange(tmp)) return 0;
			if (checked[tmp][1] != checked[i - 1][1]) return 0;
			if (visited[tmp] != 0) return 0;

			for (int j = 1; j <= k; j++) visited[i - j] = 1;
		}

		else if (state == DOWN) {
		
			int tmp = i + k - 1;
			if (!InRange(tmp)) return 0;
			if (checked[tmp][1] != checked[i][1]) return 0;
			if (visited[tmp] != 0) return 0;

			for (int j = 0; j < k; j++) visited[i + j] = 1;
		}
	}

	return 1;
}

int main() {
	
	std::ios::sync_with_stdio(false);

	int T;
	cin >> T;

	for (int t = 1; t <= T; t++) {

		ans = 0;

		cin >> n >> k;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) cin >> arr[i][j];
		}

		for (int i = 0; i < n; i++) {
			ans += Solve(i, 0, -1);
			ans += Solve(0, i, 1);
		}

		//////
		cout << "#" << t <<  " " << ans << "\n";
	}
}
