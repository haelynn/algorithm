/*
 14:43 ~

 BFS
 */

#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>

using namespace std;

struct Node{
    int x;
    int idx;
};

int n, m; // 사다리수, 뱀의수
int game[101];
int visited[101];

bool InRange(int num){
    if(num > 100) return false;
    else return true;
}

int Solution(){

    queue<Node> q;
    visited[1] = 1;
    q.push({1, 0});

    while(!q.empty()){
        Node node = q.front();
        if(node.x >= 94) return node.idx + 1;
        q.pop();

        for(int i=1; i<=6; i++){
            int next = node.x + i;
            if(!InRange(next)) continue;

            if(!visited[next]){
                visited[next] = 1;

                if(game[next] != next && !visited[game[next]]){
                    visited[game[next]] = 1;
                    q.push({game[next], node.idx+1});
                }
                else if(game[next] == next) q.push({next, node.idx+1});
            }
        }
    }

    return -1;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    for(int i=1; i<=100; i++){
        game[i] = i;
        visited[i] = 0;
    }

    cin >> n >> m;
    for(int i=0; i<n+m; i++){
        int a, b;
        cin >> a >> b;
        game[a] = b;
    }

    cout << Solution() << "\n";
}
