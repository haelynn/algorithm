#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef struct Dragon{
    int x;
    int y;
    int dir;
}Dragon;

int arr[300][300] = {0, }; // x, y
int dy[4] = {0, -1, 0, 1};
int dx[4] = {1, 0, -1, 0};
vector<Dragon> dragon;

int InDir(int dir){
    if(dir == 4) return 0;
    else return dir;
}

int main(){

    int n;
    scanf("%d", &n);

    int minX = 1000, minY= 1000, maxX=0, maxY=0;

    while(n--){

        dragon.clear();

        int x, y, d, g;
        scanf("%d %d %d %d", &x, &y, &d, &g);

        minX = min(x, minX);
        minY = min(y, minY);
        maxX = max(x, maxX);
        maxY = max(y, maxY);

        dragon.push_back({x, y, 0});
        arr[y][x]++;

        y += dy[d];
        x += dx[d];
        dragon.push_back({x, y, d});
        arr[y][x]++;

        minX = min(x, minX);
        minY = min(y, minY);
        maxX = max(x, maxX);
        maxY = max(y, maxY);

        // make dragon curve
        for(int i = 1; i <= g; i++){

            vector<Dragon> tmp;
            for(int j=dragon.size()-1; j>0; j--){
                int nd = InDir(dragon[j].dir+1);
                int ny = y + dy[nd];
                int nx = x + dx[nd];
                arr[ny][nx]++;

                tmp.push_back({ny, nx, nd});
                y = ny;
                x = nx;

                minX = min(x, minX);
                minY = min(y, minY);
                maxX = max(x, maxX);
                maxY = max(y, maxY);
            }
            for(int j=0; j<tmp.size(); j++) dragon.push_back(tmp[j]);

        }

    }

    // count square
    int cnt = 0;
    for(int i=minY; i<=maxY-1; i++) {
        for (int j = minX; j <= maxX-1; j++) {
            if(arr[i][j] && arr[i+1][j] && arr[i][j+1] && arr[i+1][j+1])
                cnt++;
        }
    }

    printf("%d\n", cnt);
}
