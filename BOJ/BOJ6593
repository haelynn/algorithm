// https://blog.naver.com/kimh0429/221496987812
#include <iostream>
#include <queue>

using namespace std;

struct Node{
    int y;
    int x;
    int z;
    int t;
};

int l, r, c;
int sl, sr, sc, ny, nx, nz;
int idx = 1;
int arr[31][31][31]; // ì¸µ, y, x
int visited[31][31][31] = {0, };
int dy[6] = {-1, 1, 0, 0, 0, 0};
int dx[6] = {0, 0, -1, 1, 0, 0};
int dz[6] = {0, 0, 0, 0, -1, 1};
Node node;
queue<Node> q;

bool InRange(int y, int x, int z){
    return y >= 1 && y <= r && x >= 1 && x <= c && z >= 1 && z <= l;
}

int BFS(){

    while(!q.empty()) q.pop();

    visited[sl][sr][sc] = idx;
    q.push({sr, sc, sl, 0});
    while(!q.empty()){
        node = q.front();
        q.pop();

        for(int i=0; i<6; i++){
            ny = node.y + dy[i];
            nx = node.x + dx[i];
            nz = node.z + dz[i];

            if(!InRange(ny, nx, nz)) continue;
            if(arr[nz][ny][nx] == 1) return node.t + 1;
            if(!arr[nz][ny][nx] && visited[nz][ny][nx] != idx){
                q.push({ny, nx, nz, node.t+1});
                visited[nz][ny][nx] = idx;
            }
        }
    }
    return -1;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(0);

    char tmp;
    int ans;
    while(true){

        cin >> l >> r >> c;
        if(!l && !r && !c) break;

        // intput
        for(int z=1; z<=l; z++){
            for(int y=1; y<=r; y++){
                for(int x=1; x<=c; x++){
                    arr[z][y][x] = 0;
                    cin >> tmp;
                    if(tmp == 'S'){
                        sl = z;
                        sr = y;
                        sc = x;
                    }
                    else if(tmp == 'E') arr[z][y][x] = 1;
                    else if(tmp == '#') arr[z][y][x] = -1;

                }
            }
        }

        ans = BFS();
        if(ans != -1) cout << "Escaped in " << ans << " minute(s).\n";
        else cout << "Trapped!\n";

        idx++;
    }
}
