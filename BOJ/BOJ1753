#define _CRT_SECURE_NO_WARNINGS
#define INF (0x7fffffff)
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

typedef struct Node {
	int to;
	int value;

	bool operator<(const Node a)const {
		return value > a.value;
	}
};
int v, e, k;
int dist[20001] = { 0, };
vector<Node> graph[20001];
priority_queue <Node> pq;


int main() {
	scanf("%d %d", &v, &e);
	scanf("%d", &k);

	for (int i = 0; i < e; i++) {
		int from, to, weight;
		scanf("%d %d %d", &from, &to, &weight);

		graph[from].push_back({to, weight});
	}

	for (int i = 1; i <= v; i++) dist[i] = INF;

	dist[k] = 0;
	pq.push({ k, 0 });

	int chk = 0;
	while (!pq.empty()) {
		int node = pq.top().to;
		int weight = pq.top().value;
		pq.pop();

		if (dist[node] > weight) 
			dist[node] = weight;

		if (dist[node] != weight) continue;

		for (int i = 0; i < graph[node].size(); i++) {
			int nNode = graph[node][i].to;
			int nDist = graph[node][i].value + weight;

			if(dist[nNode] > nDist)
				pq.push({ nNode, nDist});
		}
	}

	for (int i = 1; i <= v; i++) {
		if (dist[i] == INF) printf("INF\n");
		else printf("%d\n", dist[i]);
	}
}
