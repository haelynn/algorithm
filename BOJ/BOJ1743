// https://blog.naver.com/kimh0429/221185929228

#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

int n, m, k;
int arr[101][101];
int dy[4] = { -1, 1, 0, 0 };
int dx[4] = { 0, 0, -1, 1 };
bool checked[101][101];

bool inRange(int y, int x) {

	if (y > 0 && x > 0 && y < n + 1 && x < m + 1) return true;
	else return false;
}

int BFS(int y, int x) {

	queue <pair < int, int > > bfs;

	int cnt = 1;

	checked[y][x] = true;
	bfs.push(make_pair(y, x));

	while (!bfs.empty()) {
		
		int fy = bfs.front().first;
		int fx = bfs.front().second;

		bfs.pop();

		for (int i = 0; i < 4; i++) {
			
			int ny = fy + dy[i];
			int nx = fx + dx[i];

			if (inRange(ny, nx) && !checked[ny][nx] && arr[ny][nx] == 1) {

				cnt++;
				checked[ny][nx] = true;
				bfs.push(make_pair(ny, nx));
			}
		}
	}

	return cnt;
}

int main() {
	
	cin >> n >> m >> k;
	int res = 0;

	for (int i = 0; i < k; i++) {
		
		int a, b;
		cin >> a >> b;

		arr[a][b] = 1;
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			
			if (!checked[i][j] && arr[i][j] == 1) {
				res = max(res, BFS(i, j));
			}
		}
	}

	cout << res << "\n";
}
