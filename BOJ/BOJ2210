// https://blog.naver.com/kimh0429/221436698451

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

char arr[5][5];
int dy[4] = {0, 0, -1, 1};
int dx[4] = {-1, 1, 0, 0};
vector<string> v;

bool InRange(int y, int x){
    return y >= 0 && y < 5 && x >= 0 && x < 5;
}

void DFS(int y, int x, int depth, string str){
    if(depth > 5){
        v.push_back(str);
        return;
    }

    for(int i=0; i<4; i++){
        int ny = y + dy[i];
        int nx = x + dx[i];

        if(InRange(ny, nx)){
            DFS(ny, nx, depth+1, str+arr[ny][nx]);
        }
    }
}

int main(){
    std::ios::sync_with_stdio(false);

    for(int i=0; i<5; i++){
        for(int j=0; j<5; j++){
            cin >> arr[i][j];
        }
    }

    for(int i=0; i<5; i++){
        for(int j=0; j<5; j++){
            string tmp = "";
            DFS(i, j, 1, tmp+arr[i][j]);
        }
    }

    sort(v.begin(), v.end());

    int cnt = 1;
    for(int i=1; i<v.size(); i++){
        if(v[i] != v[i-1])cnt++;
    }

    cout << cnt << "\n";
}
