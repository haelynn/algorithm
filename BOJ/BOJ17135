// https://colynn.tistory.com/10
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

struct Node{
    int y;
    int x;
    int dist;
};

int n, m, d, ans;
int arr[16][16];
int tmp[16][16];
int warrier[3];
int dy[3] = {0, -1, 0};
int dx[3] = {-1, 0, 1};

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < m;
}

Node BFS(int y, int x){

    int visited[16][16] = {0, };
    queue<Node> q;
    q.push({y, x, 1});
    visited[y][x] = 1;

    while(!q.empty()){
        Node node = q.front();
        q.pop();

        if(tmp[node.y][node.x]) return node;

        for(int i=0; i<3; i++){
            int ny = node.y + dy[i];
            int nx = node.x + dx[i];

            if(!InRange(ny, nx) || node.dist+1 > d || visited[ny][nx]) continue;

            q.push({ny, nx, node.dist+1});
            visited[ny][nx] = 1;
        }
    }

    return {-1, -1, -1};
}

int Attack(){
    int ret = 0;

    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++)
            tmp[i][j] = arr[i][j];
    }

    for(int k=n-1; k>=0; k--){
        vector<pair<int, int> > enemy;

        for(int i=0; i<3; i++){
            Node node = BFS(k, warrier[i]);
            if(node.dist == -1) continue;
            enemy.push_back({node.y, node.x});
        }

        for(int i=0; i<enemy.size(); i++){
            int y = enemy[i].first;
            int x = enemy[i].second;

            if(!tmp[y][x]) continue;
            tmp[y][x] = 0;
            ret++;
        }
    }

    return ret;
}

void DFS(int idx, int cnt){
    if(idx > m) return;
    if(cnt == 3){
        ans = max(ans, Attack());
        return;
    }

    if(idx < m){
        warrier[cnt] = idx;
        DFS(idx+1, cnt+1);
    }
    DFS(idx+1, cnt);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> m >> d;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cin >> arr[i][j];
        }
    }

    DFS(0, 0);

    cout << ans << "\n";
}
