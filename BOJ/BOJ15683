// 18:27 ~ 19:00
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct CCTV{
    int y;
    int x;
    int type;
};

int n, m, ans = 0;
int arr[10][10];
int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};
int dir[6] = {0, 4, 2, 4, 4, 1};
int arrow[6] = {0, 1, 2, 2, 3, 4};
vector<CCTV> cctv;
int cctvNum;

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < m;
}

void DFS(int idx){

    if(idx == cctvNum){
        int cnt = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(!arr[i][j]) cnt++;
            }
        }

        ans = min(ans, cnt);
        return;
    }

    vector<pair<int, int> > tmp;
    for(int i=0; i<dir[cctv[idx].type]; i++){
        int d = i;
        for(int j=0; j<arrow[cctv[idx].type]; j++){
            int y = cctv[idx].y + dy[d];
            int x = cctv[idx].x + dx[d];

            while(InRange(y, x)){
                if(arr[y][x] == 6) break;
                if(!arr[y][x]){
                    arr[y][x] = -1;
                    tmp.push_back({y, x});
                }

                y += dy[d];
                x += dx[d];
            }

            d = (d+1) % 4;
            if(cctv[idx].type == 2) d = (d+1) % 4;
        }

        DFS(idx+1);
        for(int j=0; j<tmp.size(); j++) arr[tmp[j].first][tmp[j].second] = 0;
        tmp.clear();
    }
}

int main(){

    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            scanf("%d", &arr[i][j]);

            if(arr[i][j] >= 1 && arr[i][j] < 6){
                cctv.push_back({i, j, arr[i][j]});
            }
            else if(!arr[i][j]) ans++;
        }
    }
    cctvNum = cctv.size();
    DFS(0);

    printf("%d\n", ans);
}
