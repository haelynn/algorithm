// https://blog.naver.com/kimh0429/221427786148

#include <iostream>
#include <algorithm>

using namespace std;

int n, m, ans = 0;
int arr[501][501] = {0, };
int visited[501][501] = {0, };
int dy[4] = {0, 0, -1, 1};
int dx[4] = {-1, 1, 0, 0};
int block[16][2] = {{0, 0}, {0, 1}, {0, 2}, {1, 1},
                    {0, 0}, {-1, 1}, {0, 1}, {0, 2},
                    {0, 0}, {1, 0}, {2, 0}, {1, 1},
                    {0, 0}, {1, 0}, {1, -1}, {2, 0}};


bool InRange(int y, int x) {
    return y >= 0 && y < n && x >= 0 && x < m;
}

void Solution(int cnt, int sum, int y, int x){
    if(cnt == 3){
        ans = max(sum, ans);
        return;
    }
    else{
        for(int i=0; i<4; i++){
            int ny = y + dy[i];
            int nx = x + dx[i];

            if(!visited[ny][nx] && InRange(ny, nx)){
                visited[ny][nx]++;
                Solution(cnt+1, sum+arr[ny][nx], ny, nx);
                visited[ny][nx]--;
            }
        }
    }
}

void Exception(int y, int x){

    int sum = 0;
    int cnt = 0;

    for(int i=0; i<16; i++){
        if(i % 4 == 0) {
            if(cnt == 4) ans = max(sum, ans);
            sum = 0;
            cnt = 0;
        }

        int ny = y + block[i][0];
        int nx = x + block[i][1];

        if(InRange(ny, nx)){
            sum += arr[ny][nx];
            cnt++;
        }
    }

    if(cnt == 4) ans = max(sum, ans);
}

int main(){
    std::ios::sync_with_stdio(false);

    cin >> n >> m;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++)
            cin >> arr[i][j];
    }


    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            Exception(i, j);

            visited[i][j]++;
            Solution(0, arr[i][j], i, j);
            visited[i][j]--;
        }
    }

    cout << ans << "\n";
}
