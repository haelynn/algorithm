#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <math.h>
#include <string.h>
#include <queue>
#include <vector>

#define CASE ("Case ")
#define T (" is a tree.")
#define F (" is not a tree.")

using namespace std;

vector<int> tree[1000000];
vector<int> v;
int visited[1000000];
int parent[1000000];

void Init() {
	// init
	memset(visited, 0, sizeof(visited));
	v.clear();
	for (int i = 0; i < 1000000; i++) tree[i].clear();
}

int main() {

	int t = 1;
	while (true) {
		
		bool flag = true; // 기본을 tree라 생각
		int from, to;

		Init();
		while (true) {
			scanf("%d %d", &from, &to);
			if ((!from && !to) || (from == -1 && to == -1)) break;

			tree[from].push_back(to);
			tree[to].push_back(from);

			if (!visited[from]) {
				visited[from]++;
				v.push_back(from);
			}
			if (!visited[to]) {
				visited[to]++;
				v.push_back(to);
			}
		}
		if (from == -1 && to == -1) break;
		memset(visited, 0, sizeof(visited));
		memset(parent, 0, sizeof(parent));

		if (!v.empty()) {

			queue <int> q;
			q.push(v[0]);
			visited[v[0]]++;
			int cnt = 1;
			bool chk = true;

			while (!q.empty()) {
				int f = q.front();
				q.pop();

				for (int i = 0; i < tree[f].size(); i++) {
					int next = tree[f][i];

					if (parent[f] == next) continue;
					if (!visited[next]) {
						parent[next] = f;
						visited[next]++;
						q.push(next);
						cnt++;
					}
					else {
						flag = false;
						chk = false;
						break;
					}
				}
				if (!chk) break;
			}

			if (cnt != v.size()) flag = false;
		}

		if (flag) printf("%s%d%s\n", CASE, t++, T);
		else printf("%s%d%s\n", CASE, t++, F);
	}
}



