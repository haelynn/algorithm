// 21:10 ~
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int n, m;
int arr[101][101];
int visited[101][101] = {0, };
int dy[4] = {0, 0, -1, 1};
int dx[4] = {-1, 1, 0, 0};
vector<pair<int, int> > cheese;
int vFlag = 0;

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < m;
}

int MeltingCheese(){

    int ret = 0;
    while(true){
        vFlag++;
        visited[0][0] = vFlag;
        queue<pair<int, int> > q;
        vector<pair<int, int> > melt;
        q.push({0, 0});

        while(!q.empty()){
            int fy = q.front().first;
            int fx = q.front().second;
            arr[fy][fx] = -1;
            q.pop();

            for(int i=0; i<4; i++){
                int ny = fy + dy[i];
                int nx = fx + dx[i];

                if(!InRange(ny, nx)) continue;
                if(arr[ny][nx] != 1 && visited[ny][nx] != vFlag){
                    q.push({ny, nx});
                    visited[ny][nx] = vFlag;
                }
            }
        }

        for(int i=0; i<cheese.size(); i++){
            int fy = cheese[i].first;
            int fx = cheese[i].second;

            if(arr[fy][fx] == -1 || visited[fy][fx] == vFlag) continue;
            int chk = 0;
            for(int j=0; j<4; j++){
                int ny = fy + dy[j];
                int nx = fx + dx[j];

                if(InRange(ny, nx) && arr[ny][nx] == -1) chk++;
            }

            if(chk >= 2){
                melt.push_back({fy, fx});
            }
        }

        for(int i=0; i<melt.size(); i++) arr[melt[i].first][melt[i].second] = -1;

        if(!melt.size()) break;
        ret++;
    }


    return ret;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> m;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cin >> arr[i][j];

            if(arr[i][j]) cheese.push_back({i, j});
        }
    }

    cout << MeltingCheese() << "\n";
}
