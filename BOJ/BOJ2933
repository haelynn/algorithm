// https://blog.naver.com/kimh0429/221435855532

// 18:30 -
#include <iostream>
#include <vector>
#include <string.h>
#include <queue>

using namespace std;

int r, c, n;
char arr[101][101];
int dy[4] = {0, 0, -1, 1};
int dx[4] = {1, -1, 0, 0};
vector<pair<int, int> > cluster;

bool InRange(int y, int x){
    return y >= 0 && y < r && x >= 0 && x < c;
}

bool BFS(int y, int x){

    if(y == r-1) return true;

    int visited[101][101] = {0, };
    visited[y][x]++;

    queue<pair<int, int> > q;
    q.push({y, x});
    cluster.push_back({y, x});

    bool flag = false;
    while(!q.empty()){
        int fy = q.front().first;
        int fx = q.front().second;
        q.pop();

        for(int i=0; i<4; i++){
            int ny = fy + dy[i];
            int nx = fx + dx[i];

            if(InRange(ny, nx) && !visited[ny][nx] && arr[ny][nx] == 'x'){
                if(ny == r-1){
                    flag = true;
                    return flag;
                }

                cluster.push_back({ny, nx});
                q.push({ny, nx});
                visited[ny][nx]++;
            }
        }
    }

    return flag;
}

void Solution(bool flag, int h){

    int y = r-h;
    int x = 0;

    if(flag) x = c-1;

    bool chk = false;
    while(x<c && x>-1){
        if(arr[y][x] == 'x'){
            chk = true;
            break;
        }
        x += dx[flag];
    }
    if(!chk) return;

    ////
    arr[y][x] = '.';

    for(int i=0; i<4; i++){
        int cy = y + dy[i];
        int cx = x + dx[i];

        flag = true;
        if(InRange(cy, cx) && arr[cy][cx] == 'x'){
            cluster.clear();
            flag = BFS(cy, cx);
            if(flag == false) break;
        }
    }

    if(flag) return;

    for(int i=0; i<cluster.size(); i++){
        y = cluster[i].first;
        x = cluster[i].second;

        arr[y][x] = '.';
    }

    int down = 1;
    chk = true;

    while(chk){
        for(int i=0; i<cluster.size(); i++){
            y = cluster[i].first;
            x = cluster[i].second;

            if(arr[y+down][x] == 'x'){
                chk = false;
                down--;
                break;
            }

            if(y + down == r-1) {
                chk = false;
                break;
            }
        }
        if(!chk) break;
        down++;
    }

    for(int i=0; i<cluster.size(); i++){
        y = cluster[i].first;
        x = cluster[i].second;

        arr[y+down][x] = 'x';
    }
}

int main(){
    std::ios::sync_with_stdio(false);

    // input
    cin >> r >> c;
    for(int i=0; i<r; i++){
        for(int j=0; j<c; j++)
            cin >> arr[i][j];
    }

    cin >> n;

    bool flag = false;
    for(int i=0; i<n; i++){
        int h;
        cin >> h;

        Solution(flag, h);
        flag = !flag;
    }

    // output
    for(int k=0; k<r; k++){
        for(int j=0; j<c; j++)
            cout << arr[k][j];
        cout << "\n";
    }

}
