#include <iostream>
#include <queue>

using namespace std;

struct Node{
    int y;
    int x;
    int cnt;
};

int h, w;
char arr[110][110];
int visited[110][110][3];
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};
queue<Node> q[3];

bool InRange(int y, int x){
    return y >= 0 && y < h+2 && x >= 0 && x < w+2;
}

void BFS(int idx){

    visited[q[idx].front().y][q[idx].front().x][idx] = 0;

    while(!q[idx].empty()){
        Node node = q[idx].front();
        q[idx].pop();

        for(int i=0; i<4; i++){
            int ny = node.y + dy[i];
            int nx = node.x + dx[i];

            if(!InRange(ny, nx) || arr[ny][nx] == '*') continue;

            if(arr[ny][nx] == '#' && visited[ny][nx][idx] > node.cnt+1){
                visited[ny][nx][idx] = node.cnt + 1;
                q[idx].push({ny, nx, node.cnt+1});
            }
            else if(arr[ny][nx] == '.' && visited[ny][nx][idx] > node.cnt){
                visited[ny][nx][idx] = node.cnt;
                q[idx].push({ny, nx, node.cnt});
            }
        }
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    int T;
    cin >> T;
    while(T--){

        int ans = 0x7fffffff;
        cin >> h >> w;
        q[0].push({0, 0, 0});

        int flag = 1;
        for(int i=0; i<=h+1; i++){
            for(int j=0; j<=w+1; j++){

                for(int k=0; k<3; k++) visited[i][j][k] = 0x7fffffff;

                if(i == 0 || i == h+1 || j == 0 || j == w+1) arr[i][j] = '.';
                else cin >> arr[i][j];

                if(arr[i][j] == '$') {
                    q[flag++].push({i, j, 0});
                    arr[i][j] = '.';
                }
            }
        }

        for(int i=0; i<3; i++) BFS(i);

        for(int i=0; i<=h+1; i++){
            for(int j=0; j<=w+1; j++){
                int sum = 0;
                for(int k=0; k<3; k++) sum += visited[i][j][k];

                if(arr[i][j] == '#') ans = min(ans, sum-2);
                else ans = min(ans, sum);
            }
        }

        cout << ans << "\n";
    }
}
