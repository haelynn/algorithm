// https://blog.naver.com/kimh0429/221443564645

// 15:20 - 16:35
#include <iostream>
#include <stdio.h>

using namespace std;

int n, m, r, c, d;
int ans = 0;
int arr[51][51], visited[51][51] = {0, };
int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < m;
}

int InDirection(int dir){
    if(dir <= -1) return 3;
    if(dir >= 4) return dir - 4;
    else return dir;
}

void DFS(int y, int x, int dir, int depth){

    ans = max(depth, ans);

    int ld = InDirection(dir-1);
    int ly = y + dy[ld];
    int lx = x + dx[ld];

    if(InRange(ly, lx) && !arr[ly][lx] && !visited[ly][lx]){
        visited[ly][lx] = depth+1;
        DFS(ly, lx, ld, depth+1);
    }
    else{
        bool flag = false;
        for(int i=0; i<3; i++){
            ld = InDirection(ld-1);
            ly = y + dy[ld];
            lx = x + dx[ld];

            if(InRange(ly, lx) && !arr[ly][lx] && !visited[ly][lx]){
                visited[ly][lx] = depth + 1;
                DFS(ly, lx, ld, depth+1);
                flag = true;
                break;
            }
        }

        if(!flag){
            ld = InDirection(dir+2);
            ly = y + dy[ld];
            lx = x + dx[ld];

            if(!InRange(ly, lx) || arr[ly][lx]){
                return;
            }
            else{
                if(!visited[ly][lx]){
                    visited[ly][lx] = depth+1;
                    DFS(ly, lx, dir, depth+1);
                }
                else{
                    DFS(ly,lx, dir, depth);
                }
            }
        }
    }
}

int main(){

    scanf("%d %d", &n, &m);
    scanf("%d %d %d", &r, &c, &d);

    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++)
            scanf("%d", &arr[i][j]);
    }
    visited[r][c] = 1;
    DFS(r, c, d, 1);

    printf("%d\n", ans);
}
