// https://blog.naver.com/kimh0429/221459586247

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

struct Node{
    int to;
    int weight;

    bool operator <(const Node &a)const{
        return weight > a.weight;
    }
};
priority_queue<Node> pq;

int main(){

    int v, e;
    scanf("%d", &v);
    scanf("%d", &e);

    int from, to, w;
    vector<Node> graph[1001]; // to, weight

    for(int i=0; i<e; i++){
        scanf("%d %d %d", &from, &to, &w);

        graph[from].push_back({to, w});
    }

    scanf("%d %d", &from, &to);
    int dij[20001];
    for(int i=1; i<=v; i++){
        dij[i] = 0x7fffffff;
        if(i == from) dij[i] = 0;
    }

    pq.push({from, 0});
    while(!pq.empty()){
        Node n = pq.top();
        pq.pop();

        for(int i=0; i<graph[n.to].size(); i++){
            int next = graph[n.to][i].to;
            int nWeight = graph[n.to][i].weight;

            if(dij[next] > n.weight + nWeight){
                dij[next] = n.weight + nWeight;
                pq.push({next, dij[next]});
            }
        }
    }

    printf("%d\n", dij[to]);

}
