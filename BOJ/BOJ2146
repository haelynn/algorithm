// https://blog.naver.com/kimh0429/221438396877

#include <iostream>
#include <queue>
#include <math.h>
#include <algorithm>

using namespace std;

int n;
int arr[101][101], visited[101][101] = {0, };
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};
int ans = 0x7fffffff;

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < n;
}

void BFS(int y, int x, int island){

    queue<pair<int, int> > q;

    arr[y][x] = island;

    q.push({y, x});

    while(!q.empty()){
        int fy = q.front().first;
        int fx = q.front().second;
        q.pop();

        for(int i=0; i<4; i++){
            int ny = fy + dy[i];
            int nx = fx + dx[i];

            if(InRange(ny, nx) && arr[ny][nx] == 1){
                arr[ny][nx] = island;
                q.push({ny, nx});
            }
            else if(InRange(ny, nx) && arr[ny][nx] == 0)
                visited[fy][fx] = island;
        }
    }
}

int main(){
    std::ios::sync_with_stdio(false);

    vector<pair<int, int> > island;

    cin >> n;
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++) {
            cin >> arr[i][j];

            if(arr[i][j] == 1)
                island.push_back({i, j});
        }
    }

    int tmp = 2;
    for(int i=0; i<island.size(); i++){
        int y = island[i].first;
        int x = island[i].second;

        if(arr[y][x] == 1){
            BFS(y, x, tmp);
            tmp += 1;
        }
    }

    island.clear();
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            if(visited[i][j])
                island.push_back({i, j});

        }
    }

    for(int i=0; i<island.size()-1; i++){
        int y1 = island[i].first;
        int x1 = island[i].second;

        for(int j=1; j<island.size(); j++){
            int y2 = island[j].first;
            int x2 = island[j].second;

            if(arr[y1][x1] != arr[y2][x2]){
                int tmp = abs(y2-y1) + abs(x2-x1) - 1;
                ans = min(tmp, ans);
            }
        }
    }


    cout << ans << "\n";
}
