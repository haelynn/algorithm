#define R (0)
#define G (1)
#define B (2)
#define P (3)
#define Y (4)
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

int ans = 0;
int arr[12][6];
int checked[12][6] = {0, };
int dy[4] = {0, 0, -1, 1};
int dx[4] = {-1, 1, 0, 0};
vector<pair<int, int> > puyo;

bool InRange(int y, int x){
    return y >= 0 && y < 12 && x >= 0 && x < 6;
}

int DFS(int y, int x, int c){

    for(int i=0; i<4; i++){
        int ny = y + dy[i];
        int nx = x + dx[i];

        if(InRange(ny, nx) && !checked[ny][nx] && arr[ny][nx] == c){
            puyo.push_back({ny, nx});
            checked[ny][nx]++;
            DFS(ny, nx, c);
        }
    }
}

void DownPuyo(){

    for(int x=0; x<6; x++){
        int y = 10;

        while(y != -1){
            int ny = y+1;
            if(arr[ny][x] != -1 || arr[y][x] == -1){
                y--;
                continue;
            }

            while(ny != 11 && arr[ny][x] == -1) ny++;
            if(arr[ny][x] != -1) ny--;
            arr[ny][x] = arr[y][x];
            arr[y][x] = -1;

            y--;
        }
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    // input
    for(int i=0; i<12; i++){
        for(int j=0; j<6; j++){
            char tmp;
            cin >> tmp;

            if(tmp == '.') arr[i][j] = -1;
            else if(tmp == 'R') arr[i][j] = R;
            else if(tmp == 'G') arr[i][j] = G;
            else if(tmp == 'B') arr[i][j] = B;
            else if(tmp == 'P') arr[i][j] = P;
            else if(tmp == 'Y') arr[i][j] = Y;
        }
    }

    while(true){
        bool flag = false;
        memset(checked, 0, sizeof(checked));

        for(int i=0; i<12; i++){
            for(int j=0; j<6; j++){
                if(!checked[i][j] && arr[i][j] != -1){
                    puyo.clear();
                    DFS(i, j, arr[i][j]);
                    if(puyo.size() >= 4){
                        flag = true;

                        for(int p=0; p<puyo.size(); p++) arr[puyo[p].first][puyo[p].second] = -1;
                    }
                }
            }
        }

        if(!flag) break;
        ans++;
        DownPuyo();
    }

    printf("%d\n", ans);
}
