// 00:15 ~
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;


int h, w;
char arr[1001][1001];
int around[1001][1001] = {0, };
int dy[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
int dx[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
queue<pair<int, int> > q[2];
int flag = 0;

int Solution(){
    int ret = 0;

    while(!q[flag].empty()){
        while(!q[flag].empty()){
            int fy = q[flag].front().first;
            int fx = q[flag].front().second;
            q[flag].pop();

            for(int d=0; d<8; d++){
                int ny = fy + dy[d];
                int nx = fx + dx[d];

                around[ny][nx]++;
                if(arr[ny][nx] != '.' && arr[ny][nx] - '0' == around[ny][nx])
                    q[!flag].push({ny, nx});
            }
        }

        ret++;
        flag = !flag;
    }

    return ret;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> h >> w;
    for(int i=0; i<h; i++){
        for(int j=0; j<w; j++){
            cin >> arr[i][j];
        }
    }

    for(int i=1; i<h-1; i++){
        for(int j=1; j<w-1; j++){
            for(int d=0; d<8; d++){
                int ny = i + dy[d];
                int nx = j + dx[d];

                if(arr[ny][nx] == '.') around[i][j]++;
            }
            if(arr[i][j] != '.' && around[i][j] >= arr[i][j] - '0') {
                q[flag].push({i, j});
            }
        }
    }

    cout << Solution() << "\n";
}
