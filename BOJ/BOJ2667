#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int n;
char arr[26][26];
int checked[26][26] = { 0, };
int dy[4] = { 0, 0, -1, 1 };
int dx[4] = { -1, 1, 0, 0 };
vector <int> ans;

bool InRange(int y, int x) {
	if (y > -1 && x > -1 && y < n&& x < n) return true;
	else return false;
}

void BFS(int y, int x) {
	queue <pair<int, int> > bfs;
	int cnt = 1;

	checked[y][x] = 1;
	bfs.push({ y, x });

	while (!bfs.empty()) {
		int fy = bfs.front().first;
		int fx = bfs.front().second;
		bfs.pop();

		for (int i = 0; i < 4; i++) {
			int ny = fy + dy[i];
			int nx = fx + dx[i];

			if (InRange(ny, nx) && !checked[ny][nx] && arr[ny][nx] == '1') {
				checked[ny][nx] = 1;
				bfs.push({ ny, nx });
				cnt++;
			}
		}
	}

	ans.push_back(cnt);
}

int main() {
	std::ios::sync_with_stdio(false);

	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
		}
	}

	int cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (arr[i][j] == '1' && !checked[i][j]) {
				cnt++;
				BFS(i, j);
			}
		}
	}

	sort(ans.begin(), ans.end());

	cout << cnt << "\n";
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << "\n";
}
