https://blog.naver.com/kimh0429/221444322916

#include <iostream>
#include <stdio.h>
#include <string.h>
#define mod (1000019)

using namespace std;

typedef struct Node {

    int id;
    char name[25];
    Node* next;

    Node(int n, char *s) {
        id = n;
        int i;
        for (i = 0; s[i]; i++)
            name[i] = s[i];
        name[i] = '\0';
        next = NULL;
    }
}Node;
Node* hashTable[mod];

int MyHash(char *s) {

    int ret = 0;
    for (int i = 0, k = 1; s[i]; i++) {
        ret = (ret + k * s[i]) % mod;
        k = (k * 17) % mod;
    }

    return ret;
}

void AddHashTable(Node *node, int key) {

    if (hashTable[key] == NULL) {
        hashTable[key] = node;
    }
    else {
        node->next = hashTable[key];
        hashTable[key] = node;
    }
}

bool CompareChar(char *str1, char *str2) {

    for (int i = 0; str1[i] || str2[i]; i++) {
        if (str1[i] != str2[i]) return false;
    }
    return true;
}

int FindHashTable(char *s) {

    int key = MyHash(s);

    if (CompareChar(s, hashTable[key]->name)) {
        return hashTable[key]->id;
    }
    else {
        Node *node = hashTable[key]->next;

        while (node != NULL) {
            if (CompareChar(s, node->name)) {
                return node->id;
            }
            node = node->next;
        }
    }

    return -1;
}

int CharToString(char *str) {

    int ret = 0;
    int tmp = 1;
    for (int i = 21; i >= 0; i--) {
        if (str[i] >= '0' && str[i] <= '9') {
            ret += (str[i] - '0') * tmp;
            tmp *= 10;
        }
    }

    return ret;
}
char tab[100005][25];

int main() {

    int n, m;

    for (int i = 0; i < mod; i++)
        hashTable[i] = NULL;
    for (int i = 0; i < 100005; i++)
        for (int j = 0; j < 25; j++)
            tab[i][j] = '\0';


    scanf("%d %d", &n, &m);

    for (int i = 1; i <= n; i++) {
        char pocket[25] = {'\0',};
        scanf("%s", &pocket);

        int j;
        for (j = 0; pocket[j]; j++)
            tab[i][j] = pocket[j];
        tab[i][j] = '\0';

        int key = MyHash(pocket);
        Node *node = new Node(i, pocket);
        AddHashTable(node, key);
    }

    for (int i = 0; i < m; i++) {
        char pocket[25] = { '\0', };
        scanf("%s", &pocket);

        if (pocket[0] >= '0' && pocket[0] <= '9') {
            int idx = CharToString(pocket);
            printf("%s\n", tab[idx]);
        }
        else
            printf("%d\n", FindHashTable(pocket));
    }
}
