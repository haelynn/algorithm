// https://blog.naver.com/kimh0429/221166012118

#include <iostream>
#include <queue>

using namespace std;

int graph[1001][1001];
int checked[10001];

queue <int> bfs;

void DFS(int n, int v) {

	checked[v] = 1;
	cout << v << " ";

	for (int i = 1; i <= n; i++) {
		if (graph[v][i] == 1 && checked[i] == 0) {
			DFS(n, i);
		}
	}
}

void BFS(int n, int v, int m) {

	for (int i = 1; i <= n; i++) checked[i] = 0;

	bfs.push(v);
	checked[v] = 1;

	while (!bfs.empty()) {
		int front = bfs.front();

		bfs.pop();
		cout << front << " ";

		for (int i = 1; i <= n; i++) {

			if (graph[front][i] != 0 && checked[i] == 0) {
				checked[i] = 1;
				bfs.push(i);			
			}
		}
	}
	cout << "\n";

}

int main() {
	int n, m, v;

	cin >> n >> m >> v;

	for (int i = 0; i < m; i++) {
		int a, b;

		cin >> a >> b;

		graph[a][b] = 1;
		graph[b][a] = 1;
	}


	DFS(n, v);
	cout << "\n";
	BFS(n, v, m);

}
