#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

int n, m, ans = 0;
int arr[8][8];
vector<pair<int, int> > area;
vector<pair<int, int> > virus;

int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < m;
}

void BFS(){

    int visited[8][8] = {0, };
    queue<pair<int, int> > q;
    for(int i=0; i<virus.size(); i++){
        q.push({virus[i]});
        visited[virus[i].first][virus[i].second]++;
    }

    while(!q.empty()){
        int fy = q.front().first;
        int fx = q.front().second;
        q.pop();

        for(int i=0; i<4; i++){
            int ny = fy + dy[i];
            int nx = fx + dx[i];

            if(InRange(ny, nx) && !visited[ny][nx] && !arr[ny][nx]){
                q.push({ny, nx});
                visited[ny][nx]++;
            }
        }
    }

    int cnt = 0;
    int ch[9][9] = {0, };
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(!visited[i][j] && arr[i][j] == 0){
                cnt++;
                ch[i][j]++;
            }
        }
    }

    ans = max(ans, cnt);
}

void Spread(int cnt, int idx){

    if(idx == area.size() + 1) return;
    if(cnt == 3){
        BFS();
        return;
    }

    if(idx < area.size())
        arr[area[idx].first][area[idx].second] = 1;
    Spread(cnt+1, idx+1);

    if(idx < area.size())
        arr[area[idx].first][area[idx].second] = 0;
    Spread(cnt, idx+1);
}

int main(){

    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            scanf("%d", &arr[i][j]);

            if(arr[i][j] == 2) virus.push_back({i, j});
            else if(arr[i][j] == 0) area.push_back({i, j});
        }
    }

    Spread(0, 0);
    printf("%d\n", ans);
}
