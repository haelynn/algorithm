// 21:10 ~
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int n, m;
int arr[101][101];
int visited[101][101] = {0, };
int dy[4] = {0, 0, -1, 1};
int dx[4] = {-1, 1, 0, 0};
vector<pair<int, int> > cheese;
int vFlag = 0;

bool InRange(int y, int x){
    return y >= 0 && y < n && x >= 0 && x < m;
}

void MakeAir(){

    vFlag++;
    queue<pair<int, int> > q;
    q.push({0, 0});
    visited[0][0] = vFlag;

    while(!q.empty()){
        int fy = q.front().first;
        int fx = q.front().second;
        arr[fy][fx] = -1;
        q.pop();

        for(int i=0; i<4; i++){
            int ny = fy + dy[i];
            int nx = fx + dx[i];

            if(InRange(ny, nx) && arr[ny][nx] != 1 && visited[ny][nx] != vFlag){
                q.push({ny, nx});
                visited[ny][nx] = vFlag;
            }
        }
    }

}


pair<int, int> MeltingCheese(){
    pair<int, int> ret;

    ret.first = 1;
    ret.second = cheese.size();

    while(true){
        vector<pair<int, int> > melt;
        MakeAir();
        vFlag++;

        for(int i=0; i<cheese.size(); i++){
            if(arr[cheese[i].first][cheese[i].second] == -1) continue;
            if(visited[cheese[i].first][cheese[i].second] == vFlag) continue;

            queue<pair<int, int> > q;
            q.push({cheese[i].first, cheese[i].second});
            visited[cheese[i].first][cheese[i].second] = vFlag;

            while(!q.empty()){
                int fy = q.front().first;
                int fx = q.front().second;
                q.pop();

                bool flag = false;
                for(int d=0; d<4; d++){
                    int ny = fy + dy[d];
                    int nx = fx + dx[d];

                    if(!InRange(ny, nx)) continue;
                    if(arr[ny][nx] == 1 && visited[ny][nx] != vFlag){
                        q.push({ny, nx});
                        visited[ny][nx] = vFlag;
                    }
                    else if(arr[ny][nx] == -1) flag = true;
                }

                if(flag) melt.push_back({fy, fx});
            }
        }

        int mSize = melt.size();
        if(!mSize) break;

        if(ret.second - mSize) ret.second -= mSize;

        for(int i=0; i<melt.size(); i++) arr[melt[i].first][melt[i].second] = -1;
        ret.first++;
    }

    ret.first--;
    return ret;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> m;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cin >> arr[i][j];

            if(arr[i][j]) cheese.push_back({i, j});
        }
    }

    pair<int, int> ans = MeltingCheese();

    cout << ans.first << "\n" << ans.second << "\n";
}
