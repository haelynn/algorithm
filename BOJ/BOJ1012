// https://blog.naver.com/kimh0429/221185871658

#include <iostream>
#include <queue>
#include <string.h>

using namespace std;

int n, m, k;
int arr[51][51];
bool checked[51][51];
int dy[4] = { -1, 1, 0, 0 };
int dx[4] = { 0, 0, -1, 1 };

bool inRange(int y, int x) {

	if (y > -1 && x > -1 && y < n && x < m) return true;
	else return false;
}

void BFS(int y, int x) {

	queue <pair <int, int> > bfs;

	checked[y][x] = true;
	bfs.push(make_pair(y, x));

	while (!bfs.empty()) {
		
		int fy = bfs.front().first;
		int fx = bfs.front().second;

		bfs.pop();

		for (int i = 0; i < 4; i++) {
			
			int ny = fy + dy[i];
			int nx = fx + dx[i];

			if (inRange(ny, nx) && !checked[ny][nx] && arr[ny][nx] == 1) {
				
				checked[ny][nx] = true;
				bfs.push(make_pair(ny, nx));

			}
		}

	}

}

int main() {
	
	int t;

	cin >> t;

	while (t-- > 0) {

		int cnt = 0;
		cin >> n >> m >> k;

		for (int i = 0; i < k; i++) {
			int a, b;
			cin >> a >> b;
			arr[a][b] = 1;
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				
				if (!checked[i][j] && arr[i][j] == 1) {
					cnt++;
					BFS(i, j);
				}
			}
		}

		cout << cnt << "\n";
		memset(arr, 0, sizeof(arr));
		memset(checked, 0, sizeof(checked));
		
	}
}
