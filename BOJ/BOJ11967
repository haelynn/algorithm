#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

int n, m;
vector< pair<int, int> > arr[101][101];
int visited[101][101] = {0, };
int light[101][101] = {0, };
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};

bool InRange(int y, int x){
    return y >= 1 && y <= n && x >= 1 && x <= n;
}

int BFS(){

    int curLight = 1;
    light[1][1] = 1;
    visited[1][1] = 1;
    queue<pair<int, int> > q;
    q.push({1, 1});

    while(!q.empty()){
        int fy = q.front().first;
        int fx = q.front().second;
        if(arr[fy][fx].size()){
            for(int i=0; i<arr[fy][fx].size(); i++){
                if(!light[arr[fy][fx][i].first][arr[fy][fx][i].second]){
                    light[arr[fy][fx][i].first][arr[fy][fx][i].second] = 1;
                    curLight++;
                }
            }
        }

        q.pop();

        for(int i=0; i<4; i++){
            int ny = fy + dy[i];
            int nx = fx + dx[i];

            if(!InRange(ny, nx) || !light[ny][nx]) continue;
            if(!visited[ny][nx] || curLight > visited[ny][nx]){
                q.push({ny, nx});
                visited[ny][nx] = curLight;
            }
        }
    }

    return curLight;
}

int main(){

    scanf("%d %d", &n, &m);

    for(int i=0; i<m; i++){
        int x, y, a, b;
        scanf("%d %d %d %d", &x, &y, &a, &b);

        arr[y][x].push_back({b, a});
    }

    printf("%d\n", BFS());

}
