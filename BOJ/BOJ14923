// 20:16 ~

#include <iostream>
#include <queue>

using namespace std;

struct Node{
    int y;
    int x;
    int state;
};

int n, m, hx, hy, ex, ey;
int arr[1002][1002];
int visited[1002][1002][2] = {0, }; // 0 지팡이사용X 1 지팡이사용
int dy[4] = {-1, 1, 0, 0};
int dx[4] = {0, 0, -1, 1};

bool InRange(int y, int x){
    return y >= 1 && y <= n && x >= 1 && x <= m;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> m;
    cin >> hy >> hx;
    cin >> ey >> ex;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++)
            cin >> arr[i][j];
    }

    queue<Node> q;
    q.push({hy, hx, 0});
    visited[hy][hx][0] = 1;

    while(!q.empty()){
        Node node = q.front();
        q.pop();

        for(int i=0; i<4; i++){
            int ny = node.y + dy[i];
            int nx = node.x + dx[i];

            if(!InRange(ny, nx)) continue;
            if(ny == ey && nx == ex){
                cout <<  visited[node.y][node.x][node.state] << "\n";
                return 0;
            }

            if(!arr[ny][nx] && !visited[ny][nx][node.state]){
                q.push({ny, nx, node.state});
                visited[ny][nx][node.state] = visited[node.y][node.x][node.state] + 1;
            }
            else if(arr[ny][nx] && !node.state && !visited[ny][nx][!node.state]){
                q.push({ny, nx, 1});
                visited[ny][nx][1] = visited[node.y][node.x][node.state] + 1;
            }
        }
    }

    cout << "-1\n";
}
