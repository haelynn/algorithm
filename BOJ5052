// https://blog.naver.com/kimh0429/221445585594

#include <iostream>
#include <stdio.h>
#define mod (12289)

using namespace std;

typedef struct Node{

    char num[25];
    Node *next;

    Node(){
        next = NULL;
    }
    Node(char *str){
        int i;
        for(i=0; str[i]; i++)
            num[i] = str[i];
        num[i] = 0;

        next = NULL;
    }
}Node;
Node* hashTable[mod];
char book[mod][25];

int MyHash(char *str){

    int ret = 0;
    for(int i=0, k=1; str[i]; i++){
        ret = (ret + k * str[i]) % mod;
        k = (k * 13) % mod;
    }

    return ret;
}


bool CompareChar(char *s1, char *s2){

    for(int i=0; s1[i] || s2[i]; i++){
        if(s1[i] != s2[i]) return false;
    }
    return true;
}

void AddHashTable(char *str){

    int key = MyHash(str);
    Node* node = new Node(str);

    if(hashTable[key] == NULL){
        hashTable[key] = node;
        return;
    }
    else{
        node -> next = hashTable[key];
        hashTable[key] = node;
        return;
    }
}

bool Function(char *str){

    int key = MyHash(str);

    if(hashTable[key] == NULL) return true;
    else if(CompareChar(hashTable[key]->num, str)){
        return false;
    }
    else{
        Node* node = hashTable[key]->next;

        while(node){
            if(CompareChar(node->num, str))
                return false;

            node = node->next;
        }
    }
    return true;
}

void Init(int n){

    for(int i=0; i<mod; i++){
        if(hashTable[i]){
            Node *node = hashTable[i] -> next;
            free(hashTable[i]);

            while(node){
                Node *next = node -> next;
                free(node);
                node = next;
            }
        }

        hashTable[i] = NULL;
    }

    for(int i=0; i<n; i++){
        for(int j=0; j<25; j++)
            book[i][j] = 0;
    }
}

int CharToInt(char *str){

    int i=0;
    while(str[i++]);

    i -= 2;
    int idx = 1;
    int ret = 0;
    for(; i>=0; i--){
        ret += (str[i] - '0') * idx;
        idx *= 10;
    }
    return ret;
}

bool CompareNum(char *s1, char *s2, bool flag){

    int n1 = CharToInt(s1);
    int n2 = CharToInt(s2);

    if(flag) return n1 > n2;
    else return n1 < n2;
}

void MySwap(char *s1, char *s2){

    char tmp[25];
    int i;
    for(i=0; s1[i]; i++){
        tmp[i] = s1[i];
    }
    tmp[i] = 0;

    for(i=0; s2[i]; i++){
        s1[i] = s2[i];
    }
    s1[i] = 0;

    for(i=0; tmp[i]; i++){
        s2[i] = tmp[i];
    }
    s2[i] = 0;
}

void QuickSort(int l, int r){

    if(l >= r) return;

    int i = l;
    int j = r + 1;

    while(i <= j){
        do{ i++; } while(i<=r && CompareNum(book[l], book[i], 1));
        do{ j--; } while(j>=l+1 && CompareNum(book[l], book[j], 0));
        if(i <= j) MySwap(book[i], book[j]);
    }

    MySwap(book[l], book[j]);
    QuickSort(l, j-1);
    QuickSort(j+1, r);
}

int main(){

    int T;
    scanf("%d", &T);

    while(T--){

        int n;
        scanf("%d", &n);

        Init(n);

        for(int i=0; i<n; i++){
            char str[25];
            scanf("%s", &str);

            for(int j=0; str[j]; j++)
                book[i][j] = str[j];
        }
        QuickSort(0, n-1);

        bool flag = true;
        for(int i=0; i<n; i++){
            char tmp[25];

            for(int j=0; book[i][j]; j++){
                tmp[j] = book[i][j];
                tmp[j+1] = 0;

                flag = Function(tmp);
                if(!flag) break;
            }
            if(!flag) break;
            AddHashTable(tmp);
        }

        if(flag) printf("YES\n");
        else printf("NO\n");
    }
}
